openapi: 3.0.3
info:
  title: Hiking Routes Inventory API
  version: 1.0.0

paths:
  /routes:
    get:
      summary: Get a list of hiking routes
      responses:
        '200':
          description: A list of hiking routes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Route'
        '400':
          description: Invalid query parameters
    post:
      summary: Add a new hiking route
      description: Add a new hiking route to the inventory.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Route'
      responses:
        '201':
          description: The route was successfully created

  /routes/{routeId}:
    get:
      summary: Get details of a specific route
      parameters:
        - in: path
          name: routeId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Details of the hiking route
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Route'

components:
  schemas:
    Route:
      type: object
      properties:
        id:
          type: string
          description: The unique identifier of the route
          example: "route-12345"
        name:
          type: string
          description: The name of the hiking route
        mostDifficultSegment:
          $ref: "#/components/schemas/RouteSegment"

        routeSegments:
          type: array
          items:
            $ref: "#/components/schemas/RouteSegment"

      required:
        - id
        - name
        - routeSegments

    RouteSegment:
      type: object
      discriminator:
        propertyName: discriminator
      oneOf:
        - $ref: "#/components/schemas/HikingSegment"
        - $ref: "#/components/schemas/MountainRideSegment"
      nullable: false

    RouteSegmentBase:
      type: object
      discriminator:
        propertyName: discriminator
        mapping:
          HIKINGSEGMENT: "#/components/schemas/HikingSegment"
          MOUNTAINRIDESEGMENT: "#/components/schemas/MountainRideSegment"
      properties:
        discriminator:
          type: string
          nullable: false
          readOnly: true
        from:
          type: string
          nullable: false
          minLength: 1
        to:
          type: string
          nullable: false
          minLength: 1
        distance:
          type: integer
          minimum: 0
          exclusiveMinimum: false
        averageTripTime:
          type: integer
          minimum: 0
          exclusiveMinimum: true
      nullable: false
      required:
        - discriminator # error if missing
        - from
        - to

    HikingSegment:
      type: object
      allOf:
        - $ref: "#/components/schemas/RouteSegmentBase"
        - $ref: "#/components/schemas/HikingSegmentDetails"
      nullable: false

    HikingSegmentDetails:
      type: object
      properties:
        elevationDifference:
          type: number
        difficulty:
          type: string
          enum:
            - EASY
            - MEDIUM
            - HARD
      required:
        - elevationDifference
        - difficulty
      nullable: false

    MountainRideSegment:
      type: object
      allOf:
        - $ref: "#/components/schemas/RouteSegmentBase"
        - $ref: "#/components/schemas/MountainRideSegmentDetails"
      nullable: false

    MountainRideSegmentDetails:
      type: object
      properties:
        elevationDifference:
          type: number
        freeOfCharge:
          type: boolean
        timeTableUrl:
          type: string
          format: uri
      required:
        - elevationDifference
      nullable: false
